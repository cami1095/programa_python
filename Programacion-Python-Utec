{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/cami1095/programa_python/blob/main/Programacion-Python-Utec\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<img src=\"https://posgrado.utec.edu.pe/sites/default/files/2023-08/Testimonial-home-2.jpg\" alt=\"HTML5 Icon\" width=\"900\" height=\"250\" >\n"
      ],
      "metadata": {
        "id": "dYz-CyepUcRS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Trabajo Calificado: Misiones de C√≥digo**"
      ],
      "metadata": {
        "id": "tYd6BiWgUfLo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Contexto:**\n",
        "\n",
        "Eres desarrollador de un Simulador de Aventuras llamado Pythonia, un entorno virtual de entrenamiento dise√±ado para mejorar tus habilidades de programaci√≥n. En este simulador, enfrentar√°s una serie de desaf√≠os basados en situaciones de videojuegos y escenarios de aventura, donde deber√°s aplicar estructuras l√≥gicas, condicionales, bucles y funciones para resolver problemas.\n",
        "\n"
      ],
      "metadata": {
        "id": "GtjjVTFRU6W1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cada ejercicio representa un reto independiente que simula eventos comunes en el desarrollo de videojuegos, sistemas de simulaci√≥n y l√≥gica de juegos interactivos."
      ],
      "metadata": {
        "id": "Ggayz2SXVXjt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Recomendaciones:**\n",
        "\n",
        "Utilizar buenas pr√°cticas: comentarios, entradas y salidas limpias.\n",
        "\n",
        "Uso de funciones donde sea necesario."
      ],
      "metadata": {
        "id": "eAL1_dscUjd_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 1: Elige tu personaje (Variables y Entrada/Salida)**\n",
        "\n",
        "Crea un programa que permita al jugador elegir su personaje entre Mago, Guerrero o Arquero. Seg√∫n la elecci√≥n, muestra un mensaje personalizado con las estad√≠sticas iniciales (vida, poder, defensa)."
      ],
      "metadata": {
        "id": "YpxJc_PoVc4c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mostramos opciones al usuario\n",
        "print(\"üßù‚Äç‚ôÄÔ∏è Elige tu personaje:\")\n",
        "print(\"1. Mago\")\n",
        "print(\"2. Guerrero\")\n",
        "print(\"3. Arquero\")\n",
        "\n",
        "# Solicitamos entrada del jugador\n",
        "eleccion = input(\"Escribe el nombre de tu personaje: \").strip().lower()\n",
        "\n",
        "# Mostramos estad√≠sticas seg√∫n personaje elegido\n",
        "if eleccion == \"mago\":\n",
        "    print(\"\\nüßô‚Äç‚ôÇÔ∏è Has elegido al Mago.\")\n",
        "    print(\"Vida: 70 | Poder: 90 | Defensa: 40\")\n",
        "elif eleccion == \"guerrero\":\n",
        "    print(\"\\nüó°Ô∏è Has elegido al Guerrero.\")\n",
        "    print(\"Vida: 100 | Poder: 60 | Defensa: 70\")\n",
        "elif eleccion == \"arquero\":\n",
        "    print(\"\\nüèπ Has elegido al Arquero.\")\n",
        "    print(\"Vida: 80 | Poder: 75 | Defensa: 60\")\n",
        "else:\n",
        "    print(\"\\n‚ùå Opci√≥n no v√°lida. Por favor, elige entre Mago, Guerrero o Arquero.\")"
      ],
      "metadata": {
        "id": "GZrzl-7wVfkW",
        "outputId": "7d92e123-cb8b-44b3-8242-306b3ca99e04",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üßù‚Äç‚ôÄÔ∏è Elige tu personaje:\n",
            "1. Mago\n",
            "2. Guerrero\n",
            "3. Arquero\n",
            "Escribe el nombre de tu personaje: mago\n",
            "\n",
            "üßô‚Äç‚ôÇÔ∏è Has elegido al Mago.\n",
            "Vida: 70 | Poder: 90 | Defensa: 40\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 2: La prueba del sabio (Condicionales)**\n",
        "\n",
        "El sabio te hace una pregunta: si traes menos de 50 monedas de oro, te expulsar√°; si llevas entre 50 y 100, te permitir√° pasar; si llevas m√°s de 100, te dar√° una poci√≥n.\n",
        "Crea el programa que lea las monedas y muestre el resultado."
      ],
      "metadata": {
        "id": "kvoGwX-QVgPr"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "3tg6KSK-UbUw",
        "outputId": "5b18b502-29a1-4c40-d5d0-180ebdd990ab",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¬øCu√°ntas monedas de oro traes? 50\n",
            "‚úÖ Puedes pasar, aventurero.\n"
          ]
        }
      ],
      "source": [
        "monedas = int(input(\"¬øCu√°ntas monedas de oro traes? \"))\n",
        "\n",
        "if monedas < 50:\n",
        "    print(\"üí® El sabio te ha expulsado por traer pocas monedas.\")\n",
        "elif 50 <= monedas <= 100:\n",
        "    print(\"‚úÖ Puedes pasar, aventurero.\")\n",
        "else:\n",
        "    print(\"üß™ El sabio te recompensa con una poci√≥n m√°gica.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 3: El puente infinito (Bucles While)**\n",
        "\n",
        "Dise√±a un programa que simule el cruce de un puente que cambia su estructura aleatoriamente. El jugador debe adivinar si el siguiente paso ser√° seguro ('s') o peligroso ('p').\n",
        "El juego termina si el jugador elige 'salir' o si falla 3 veces."
      ],
      "metadata": {
        "id": "g7B02fWhVj4M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "fallos = 0\n",
        "\n",
        "print(\"üåâ Cruza el puente adivinando si el siguiente paso es seguro ('s') o peligroso ('p').\")\n",
        "print(\"Escribe 'salir' para abandonar la misi√≥n.\\n\")\n",
        "\n",
        "while fallos < 3:\n",
        "    paso_real = random.choice(['s', 'p'])\n",
        "    eleccion = input(\"¬øCu√°l es tu elecci√≥n? (s/p/salir): \").lower()\n",
        "\n",
        "    if eleccion == \"salir\":\n",
        "        print(\"üèÉ‚Äç‚ôÇÔ∏è Has escapado del puente.\")\n",
        "        break\n",
        "    elif eleccion == paso_real:\n",
        "        print(\"‚úÖ ¬°Buen paso! Sigues avanzando.\")\n",
        "    else:\n",
        "        fallos += 1\n",
        "        print(f\"‚ùå Fallaste. Fallos acumulados: {fallos}\")\n",
        "\n",
        "if fallos >= 3:\n",
        "    print(\"üíÄ Ca√≠ste del puente. Fin del juego.\")\n"
      ],
      "metadata": {
        "id": "9DRMWhDBVn71",
        "outputId": "aa1bcb3f-b72c-4438-b9ac-15ee0ffb11a7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üåâ Cruza el puente adivinando si el siguiente paso es seguro ('s') o peligroso ('p').\n",
            "Escribe 'salir' para abandonar la misi√≥n.\n",
            "\n",
            "¬øCu√°l es tu elecci√≥n? (s/p/salir): s\n",
            "‚úÖ ¬°Buen paso! Sigues avanzando.\n",
            "¬øCu√°l es tu elecci√≥n? (s/p/salir): p\n",
            "‚ùå Fallaste. Fallos acumulados: 1\n",
            "¬øCu√°l es tu elecci√≥n? (s/p/salir): p\n",
            "‚úÖ ¬°Buen paso! Sigues avanzando.\n",
            "¬øCu√°l es tu elecci√≥n? (s/p/salir): s\n",
            "‚ùå Fallaste. Fallos acumulados: 2\n",
            "¬øCu√°l es tu elecci√≥n? (s/p/salir): s\n",
            "‚úÖ ¬°Buen paso! Sigues avanzando.\n",
            "¬øCu√°l es tu elecci√≥n? (s/p/salir): p\n",
            "‚ùå Fallaste. Fallos acumulados: 3\n",
            "üíÄ Ca√≠ste del puente. Fin del juego.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 4: El laberinto secreto (Bucle For y Range)**\n",
        "\n",
        "Crea un programa que muestre una cuenta regresiva desde 10 hasta 1 al estilo nivel de escape del laberinto. Cada n√∫mero debe ir acompa√±ado de un mensaje tipo \"Quedan X segundos para escapar\"."
      ],
      "metadata": {
        "id": "66qKXQwTVoZG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(\"‚è≥ Inicia la cuenta regresiva para escapar del laberinto:\\n\")\n",
        "\n",
        "for i in range(10, 0, -1):\n",
        "    print(f\"Quedan {i} segundos para escapar...\")"
      ],
      "metadata": {
        "id": "i1S9WPmhVsEj",
        "outputId": "d316cdaf-b043-44a8-b536-d95ccde5636b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚è≥ Inicia la cuenta regresiva para escapar del laberinto:\n",
            "\n",
            "Quedan 10 segundos para escapar...\n",
            "Quedan 9 segundos para escapar...\n",
            "Quedan 8 segundos para escapar...\n",
            "Quedan 7 segundos para escapar...\n",
            "Quedan 6 segundos para escapar...\n",
            "Quedan 5 segundos para escapar...\n",
            "Quedan 4 segundos para escapar...\n",
            "Quedan 3 segundos para escapar...\n",
            "Quedan 2 segundos para escapar...\n",
            "Quedan 1 segundos para escapar...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 5: Cofres encantados (Break y Continue)**\n",
        "\n",
        "Simula 10 cofres cerrados, pero uno de ellos es una trampa explosiva (elige aleatoriamente una posici√≥n).\n",
        "El jugador abre cofres uno por uno:\n",
        "\n",
        "* Si encuentra la trampa, termina el juego (break).\n",
        "\n",
        "* Si encuentra cofres vac√≠os, contin√∫a (continue).\n",
        "\n",
        "* Si abre todos sin explotar, gana."
      ],
      "metadata": {
        "id": "5dL6C-x1VsYf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "trampa = random.randint(1, 10)\n",
        "print(\"üß∞ Abre los cofres con cuidado. ¬°Uno de ellos es una trampa!\")\n",
        "\n",
        "for i in range(1, 11):\n",
        "    input(f\"\\nPresiona ENTER para abrir el cofre #{i}...\")\n",
        "\n",
        "    if i == trampa:\n",
        "        print(\"üí• ¬°Trampa explosiva! Has perdido.\")\n",
        "        break\n",
        "    else:\n",
        "        print(\"ü™ô El cofre estaba vac√≠o.\")\n",
        "\n",
        "else:\n",
        "    print(\"üéâ Abriste todos los cofres sin explotar. ¬°Has ganado!\")\n",
        ""
      ],
      "metadata": {
        "id": "d0hcbl0_V2BI",
        "outputId": "338b341f-9c68-43be-fcb4-5bc46375da7a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üß∞ Abre los cofres con cuidado. ¬°Uno de ellos es una trampa!\n",
            "\n",
            "Presiona ENTER para abrir el cofre #1...\n",
            "ü™ô El cofre estaba vac√≠o.\n",
            "\n",
            "Presiona ENTER para abrir el cofre #2...\n",
            "ü™ô El cofre estaba vac√≠o.\n",
            "\n",
            "Presiona ENTER para abrir el cofre #3...\n",
            "ü™ô El cofre estaba vac√≠o.\n",
            "\n",
            "Presiona ENTER para abrir el cofre #4...\n",
            "ü™ô El cofre estaba vac√≠o.\n",
            "\n",
            "Presiona ENTER para abrir el cofre #5...\n",
            "ü™ô El cofre estaba vac√≠o.\n",
            "\n",
            "Presiona ENTER para abrir el cofre #6...\n",
            "ü™ô El cofre estaba vac√≠o.\n",
            "\n",
            "Presiona ENTER para abrir el cofre #7...\n",
            "ü™ô El cofre estaba vac√≠o.\n",
            "\n",
            "Presiona ENTER para abrir el cofre #8...\n",
            "üí• ¬°Trampa explosiva! Has perdido.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 6: Pociones m√°gicas (Funciones b√°sicas)**\n",
        "\n",
        "Crea una funci√≥n usar_pocion(tipo) que permita al jugador elegir entre 'vida', 'fuerza' o 'velocidad', y retorne el efecto de la poci√≥n.\n",
        "Luego, pide al usuario que elija una poci√≥n y muestra el resultado llamando a la funci√≥n."
      ],
      "metadata": {
        "id": "94yOz-rKV2gp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def usar_pocion(tipo):\n",
        "    if tipo == \"vida\":\n",
        "        return \"‚ù§Ô∏è Recuperas 50 puntos de vida.\"\n",
        "    elif tipo == \"fuerza\":\n",
        "        return \"üí™ Tu fuerza aumenta en 30 puntos.\"\n",
        "    elif tipo == \"velocidad\":\n",
        "        return \"‚ö° Eres el doble de r√°pido por 5 turnos.\"\n",
        "    else:\n",
        "        return \"‚ùå Pocion desconocida.\"\n",
        "\n",
        "opcion = input(\"Elige una poci√≥n (vida / fuerza / velocidad): \").lower()\n",
        "print(usar_pocion(opcion))"
      ],
      "metadata": {
        "id": "NQKm0w5iV4Zz",
        "outputId": "9c4f6e10-a78c-4d7b-fb20-5a59dc06f462",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Elige una poci√≥n (vida / fuerza / velocidad): fuerza\n",
            "üí™ Tu fuerza aumenta en 30 puntos.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 7: Calculadora de da√±o cr√≠tico (Funciones con par√°metros)**\n",
        "\n",
        "Crea una funci√≥n calcular_danio(base, critico) que reciba el da√±o base y un porcentaje de cr√≠tico, devolviendo el da√±o total.\n",
        "El usuario ingresar√° el da√±o base y el porcentaje cr√≠tico."
      ],
      "metadata": {
        "id": "Qdnbnm4nV44h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def calcular_danio(base, critico):\n",
        "    return base + (base * critico / 100)\n",
        "\n",
        "base = float(input(\"Ingresa el da√±o base: \"))\n",
        "critico = float(input(\"Ingresa el % de cr√≠tico: \"))\n",
        "\n",
        "total = calcular_danio(base, critico)\n",
        "print(f\"üî• Da√±o total infligido: {total}\")"
      ],
      "metadata": {
        "id": "leaLQJWrV8Tx",
        "outputId": "9a549321-0cec-475a-f67e-1e29d6391488",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa el da√±o base: 100\n",
            "Ingresa el % de cr√≠tico: 50\n",
            "üî• Da√±o total infligido: 150.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 8: El desaf√≠o del drag√≥n (Condicionales + funciones + bucles)**\n",
        "\n",
        "Dise√±a una funci√≥n enfrentar_dragon(vida, fuerza) que simule el combate:\n",
        "\n",
        "* El jugador ataca al drag√≥n y el drag√≥n contraataca restando vida.\n",
        "\n",
        "* Si la vida llega a 0, el jugador pierde.\n",
        "\n",
        "* Si el jugador realiza 3 ataques consecutivos sin morir, gana.\n",
        "Usa un bucle while interno para el combate."
      ],
      "metadata": {
        "id": "d4j1ckE2V9ag"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def enfrentar_dragon(vida, fuerza):\n",
        "    ataques = 0\n",
        "    while vida > 0 and ataques < 3:\n",
        "        print(f\"\\nüîÅ Turno de ataque #{ataques + 1}\")\n",
        "        print(f\"Tu vida: {vida}\")\n",
        "        print(\"‚öîÔ∏è Atacas al drag√≥n...\")\n",
        "        print(\"üêâ El drag√≥n contraataca con 30 de da√±o.\")\n",
        "        vida -= 30\n",
        "        ataques += 1\n",
        "\n",
        "    if vida <= 0:\n",
        "        print(\"üíÄ Has sido derrotado por el drag√≥n.\")\n",
        "    else:\n",
        "        print(\"üèÜ ¬°Has vencido al drag√≥n tras 3 ataques!\")\n",
        "\n",
        "vida = int(input(\"Ingresa tu vida inicial: \"))\n",
        "fuerza = int(input(\"Ingresa tu fuerza: \"))\n",
        "enfrentar_dragon(vida, fuerza)"
      ],
      "metadata": {
        "id": "_CGyWwuaWByi",
        "outputId": "f87403c2-b41a-4a0b-c0c8-7d1bf1ed0166",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa tu vida inicial: 100\n",
            "Ingresa tu fuerza: 50\n",
            "\n",
            "üîÅ Turno de ataque #1\n",
            "Tu vida: 100\n",
            "‚öîÔ∏è Atacas al drag√≥n...\n",
            "üêâ El drag√≥n contraataca con 30 de da√±o.\n",
            "\n",
            "üîÅ Turno de ataque #2\n",
            "Tu vida: 70\n",
            "‚öîÔ∏è Atacas al drag√≥n...\n",
            "üêâ El drag√≥n contraataca con 30 de da√±o.\n",
            "\n",
            "üîÅ Turno de ataque #3\n",
            "Tu vida: 40\n",
            "‚öîÔ∏è Atacas al drag√≥n...\n",
            "üêâ El drag√≥n contraataca con 30 de da√±o.\n",
            "üèÜ ¬°Has vencido al drag√≥n tras 3 ataques!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 9: El camino del h√©roe (Recursividad sencilla)**\n",
        "\n",
        "Crea una funci√≥n recursiva que simule el camino de un h√©roe cruzando N obst√°culos, mostrando mensajes como:\n",
        "\n",
        "\"Obst√°culo 3: saltando...\"\n",
        "\n",
        "Termina cuando N llegue a 0."
      ],
      "metadata": {
        "id": "8X5Y08fQWCFU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cruzar_obstaculos(n):\n",
        "    if n == 0:\n",
        "        print(\"üéØ ¬°Has superado todos los obst√°culos!\")\n",
        "    else:\n",
        "        print(f\"Obst√°culo {n}: saltando...\")\n",
        "        cruzar_obstaculos(n - 1)\n",
        "\n",
        "numero = int(input(\"¬øCu√°ntos obst√°culos deseas cruzar? \"))\n",
        "cruzar_obstaculos(numero)"
      ],
      "metadata": {
        "id": "vVDjZHSVWJdQ",
        "outputId": "ea2a990a-c699-471a-d2d4-d075d7ab008f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¬øCu√°ntos obst√°culos deseas cruzar? 5\n",
            "Obst√°culo 5: saltando...\n",
            "Obst√°culo 4: saltando...\n",
            "Obst√°culo 3: saltando...\n",
            "Obst√°culo 2: saltando...\n",
            "Obst√°culo 1: saltando...\n",
            "üéØ ¬°Has superado todos los obst√°culos!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ejercicio 10: Torre de los hechizos (Reto Integrador Final)**\n",
        "\n",
        "Crea un programa completo que combine:\n",
        "\n",
        "* Elecci√≥n de personaje.\n",
        "\n",
        "* Simulaci√≥n de un combate contra un enemigo con vida y defensa.\n",
        "\n",
        "* Uso de funciones para calcular el da√±o.\n",
        "\n",
        "* Bucles para turnos de combate.\n",
        "\n",
        "* Uso de una funci√≥n recursiva que simule las rondas como niveles (nivel 1, 2, 3 hasta ganar).\n",
        "\n"
      ],
      "metadata": {
        "id": "Behbpl_8WJzR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def elegir_personaje():\n",
        "    personaje = input(\"Elige tu personaje (mago / guerrero / arquero): \").lower()\n",
        "    if personaje == \"mago\":\n",
        "        return {\"vida\": 70, \"poder\": 90, \"defensa\": 40}\n",
        "    elif personaje == \"guerrero\":\n",
        "        return {\"vida\": 100, \"poder\": 60, \"defensa\": 70}\n",
        "    elif personaje == \"arquero\":\n",
        "        return {\"vida\": 80, \"poder\": 75, \"defensa\": 60}\n",
        "    else:\n",
        "        print(\"Personaje no v√°lido.\")\n",
        "        return elegir_personaje()\n",
        "\n",
        "def calcular_danio(poder, defensa_enemiga):\n",
        "    return max(0, poder - defensa_enemiga)\n",
        "\n",
        "def nivel_combate(nivel, jugador):\n",
        "    enemigo_vida = 50 + (nivel * 20)\n",
        "    enemigo_defensa = 30 + (nivel * 5)\n",
        "    print(f\"\\nüß± Nivel {nivel}: Enemigo con {enemigo_vida} de vida y {enemigo_defensa} de defensa.\")\n",
        "    while enemigo_vida > 0 and jugador[\"vida\"] > 0:\n",
        "        danio = calcular_danio(jugador[\"poder\"], enemigo_defensa)\n",
        "        enemigo_vida -= danio\n",
        "        print(f\"üî™ Atacas y causas {danio} de da√±o. Vida del enemigo: {max(enemigo_vida, 0)}\")\n",
        "        jugador[\"vida\"] -= 25\n",
        "        print(f\"üí• El enemigo contraataca. Tu vida: {max(jugador['vida'], 0)}\")\n",
        "\n",
        "    if jugador[\"vida\"] <= 0:\n",
        "        print(\"‚ò†Ô∏è Has sido derrotado.\")\n",
        "    elif nivel == 3:\n",
        "        print(\"üèÜ ¬°Has conquistado la Torre de los Hechizos!\")\n",
        "    else:\n",
        "        nivel_combate(nivel + 1, jugador)\n",
        "\n",
        "jugador = elegir_personaje()\n",
        "nivel_combate(1, jugador)\n"
      ],
      "metadata": {
        "id": "smtLq1SDWTJd",
        "outputId": "9e1b8c6d-d660-4b40-b154-6e844f6c4b66",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Elige tu personaje (mago / guerrero / arquero): mago\n",
            "\n",
            "üß± Nivel 1: Enemigo con 70 de vida y 35 de defensa.\n",
            "üî™ Atacas y causas 55 de da√±o. Vida del enemigo: 15\n",
            "üí• El enemigo contraataca. Tu vida: 45\n",
            "üî™ Atacas y causas 55 de da√±o. Vida del enemigo: 0\n",
            "üí• El enemigo contraataca. Tu vida: 20\n",
            "\n",
            "üß± Nivel 2: Enemigo con 90 de vida y 40 de defensa.\n",
            "üî™ Atacas y causas 50 de da√±o. Vida del enemigo: 40\n",
            "üí• El enemigo contraataca. Tu vida: 0\n",
            "‚ò†Ô∏è Has sido derrotado.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "\n",
        "# Gracias por completar este laboratorio!\n",
        "\n",
        "---\n"
      ],
      "metadata": {
        "id": "EONqoa25Wlx3"
      }
    }
  ]
}